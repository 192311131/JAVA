public class GenericSorter<T extends Comparable<T>> {

    private T[] array;

    public GenericSorter(T[] array) {
        this.array = array;
    }

    public void sort() {
        quickSort(array, 0, array.length - 1);
    }

    private void quickSort(T[] array, int low, int high) {
        if (low < high) {
            int pi = partition(array, low, high);
            quickSort(array, low, pi - 1);
            quickSort(array, pi + 1, high);
        }
    }

    private int partition(T[] array, int low, int high) {
        T pivot = array[high];
        int i = (low - 1);

        for (int j = low; j < high; j++) {
            if (array[j].compareTo(pivot) <= 0) {
                i++;
                swap(array, i, j);
            }
        }

        swap(array, i + 1, high);
        return i + 1;
    }

    private void swap(T[] array, int i, int j) {
        T temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    public T[] getSortedArray() {
        return array;
    }

    public static void main(String[] args) {
        // Example usage with Integer array
        Integer[] intArray = {5, 3, 8, 1, 2};
        GenericSorter<Integer> intSorter = new GenericSorter<>(intArray);
        intSorter.sort();
        System.out.println("Sorted Integer Array: ");
        for (Integer num : intSorter.getSortedArray()) {
            System.out.print(num + " ");
        }
        System.out.println();

        // Example usage with String array
        String[] strArray = {"Banana", "Apple", "Cherry"};
        GenericSorter<String> strSorter = new GenericSorter<>(strArray);
        strSorter.sort();
        System.out.println("Sorted String Array: ");
        for (String str : strSorter.getSortedArray()) {
            System.out.print(str + " ");
        }
        System.out.println();
    }
}
